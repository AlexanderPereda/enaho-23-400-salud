[
  {
    "objectID": "main.html",
    "href": "main.html",
    "title": "¿A dónde va un peruano cuando se enferma?",
    "section": "",
    "text": "En el Perú, el sector salud debe trabajar estrechamente con los datos para implementar reformas adecuadas que beneficien a los ciudadanos. La información proveniente de encuestas de hogares constituye un recurso valioso que podemos utilizar para obtener insights significativos.\nEn este trabajo haremos un análisis sobre una pregunta muy común : ¿A dónde acudimos cuando nos sentimos enfermos?\nAgruparemos a la población peruana en cuatro zonas geográficas:\n\nNorte: Tumbes, Piura, Lambayeque, Cajamarca, La Libertad y Amazonas\nSur: Ayacucho, Cusco, Apurímac, Arequipa, Puno, Moquegua y Tacna\nOriente: Loreto, San Martín, Ucayali y Madre de Dios\nCentro: Áncash, Huánuco, Pasco, Junín, Huancavelica, Ica, Callao y Lima\n\nNos proponemos a responder las siguientes preguntas:\n\n¿Cómo están distribuidas las personas que presentaron algún malestar en el Perú según la zona geográfica?\n¿Cómo varían las preferencias de las personas que presentan algún malestar según la zona en que se ubican?\n¿Qué establecimientos visitan más?\n\nLa información general del proyecto es la siguiente:\n\nFuente de datos: Módulo 400 de ENAHO 2023, obtenido de la página de microdatos de INEI, y “Límites departamentales” obtenido de la página de datos abiertos del Perù.\nEntorno de trabajo: El análisis se realiza en Visual Studio Code utilizando el lenguaje de programación R.\nFormato: El documento se presenta en formato Quarto, adoptando un enfoque narrativo para los resultados. Los archivos están debidamente comentados y siguen buenas prácticas para garantizar la reproducibilidad.\n\nPSDT: se recomienda mucho leer la ficha técnica, toda la información relevante sobre ENAHO se encuentra allí."
  },
  {
    "objectID": "main.html#pregunta-1",
    "href": "main.html#pregunta-1",
    "title": "¿A dónde va un peruano cuando se enferma?",
    "section": "Pregunta 1",
    "text": "Pregunta 1\n\n¿Cómo están distribuidas las personas que presentaron algún malestar en el Perú según la zona geográfica?\n\n \n\nPodemos observar lo siguiente:\n\nLa zona Centro posee mayor concentración de individuos (40%).\nLa zona Norte y Sur poseen cantidades bastante semejantes (aprox. 23%).\nOriente cuenta con un 13% de población afectada."
  },
  {
    "objectID": "main.html#pregunta-2",
    "href": "main.html#pregunta-2",
    "title": "¿A dónde va un peruano cuando se enferma?",
    "section": "Pregunta 2",
    "text": "Pregunta 2\n\n¿Cómo varían las preferencias de las personas que presentan algún malestar según la zona en que se ubican?\n\n \n\nEl siguiente gráfico de barras nos da la respuesta.\n\nPreferencias de la población con malestar según zona.  Elaboración propia. Fuente: Enaho 2023, Módulo 400\n\nPodemos ver como las 4 zonas son prácticamente idénticas en comportamiento, por lo tanto podemos decir que ante un malestar el peruano tiene una respuesta uniforme a lo largo y ancho de todo el Perú."
  },
  {
    "objectID": "main.html#pregunta-3",
    "href": "main.html#pregunta-3",
    "title": "¿A dónde va un peruano cuando se enferma?",
    "section": "Pregunta 3",
    "text": "Pregunta 3\n\n¿Qué establecimientos visitan más?\n\n \n\nDel gráfico anterior son 3 las variables que destacan:\n\np40314 : No buscó atención a su dolencia.\np40310 : Buscó consulta sobre su dolencia en la farmacia o botica.\np4031 : Buscó consulta sobre su dolencia en puesto de salud MINSA.\n\nVeámoslas mas de cerca.\n\n\n Frecuencia de las variables en todo el Perú\n  \n\n\n\n\nPreferencias de la población con malestar en el Perú.  Elaboración propia. Fuente: Enaho 2023, Módulo 400\n\nPodemos ver que la acción mas común para un peruano es no buscar atención; por otro lado la opción de la farmacia o botica ocupa la segunda posición, lo cual puede deberse a la facilidad de acceso que tienen los peruanos a estos establecimientos y la comodidad de los precios."
  },
  {
    "objectID": "scripts/04-eda.html",
    "href": "scripts/04-eda.html",
    "title": "04-eda",
    "section": "",
    "text": "Cargar librerías necesarias\n\n\nCode\nlibrary(dplyr)      \n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(tidyr)      \nlibrary(ggplot2)    \nlibrary(patchwork)  \n\n\n\n\nCode\n# Crearemos un grafico de todas las posibles opciones de consulta para aquel que sintio malestar, dividido por zonas. El significado de cada variable puede ser revisado al inicio del documento.\ngrafico_zona &lt;- function(data, region) {\n  \n  # Creamos un df filtrado\n  datos_filtrados &lt;- data |&gt;\n    select(zona, starts_with(\"p403\")) |&gt;\n    filter(zona == region)  # Filtramos solo por la zona indicada\n  \n  # Contamos la frecuencia de cada valor 1 en las columnas p403\n  frecuencia &lt;- datos_filtrados |&gt;\n    pivot_longer(cols = starts_with(\"p403\"), names_to = \"Columna\", values_to = \"Valor\") |&gt;\n    filter(Valor == 1) |&gt;\n    group_by(Columna) |&gt;\n    summarise(Cantidad = n(), .groups = 'drop')  # Contamos las ocurrencias de valor 1\n\n  # Crear el gráfico de barras con color morado fijo\n  ggplot(frecuencia, aes(x = Cantidad, y = Columna)) +\n    geom_bar(stat = \"identity\", position = \"dodge\", fill = \"#A456DB\", show.legend = FALSE) +  # formato de las barras\n    labs(title = region, x = \"\", y = \"\") +  # Título de la zona y ejes vacíos\n    theme_minimal() +  # Usamos un tema minimalista\n    theme(\n      axis.ticks = element_blank(),\n      axis.text.y = element_text(angle = 0, color = \"white\"),  # Texto en el eje Y en blanco\n      plot.title = element_text(color = \"white\",  # Título en blanco\n                                hjust = 0.5,  # Centrado\n                                size = 16,  # Tamaño del título\n                                face = \"bold\"),  # Título en negrita\n      plot.background = element_rect(fill = \"#222\", color = \"#222\"),  # Fondo oscuro para el gráfico\n      panel.background = element_rect(fill = \"#222\", color = \"#222\"),  # Fondo oscuro para el panel de barras\n      axis.text = element_text(color = \"white\"),  # Texto de los ejes en blanco\n      panel.grid.major = element_blank(),  # Elimina las líneas principales de la cuadrícula\n      panel.grid.minor = element_line(color = \"gray\", linewidth = 0.25)  # Solo deja unas pocas líneas\n    )\n}\n\n\n\n\nCode\ndatos_procesados &lt;- readRDS(\"outputs/datos_procesados.rds\")\n\n# Crear gráficos para cada zona\ngrafico_norte &lt;- grafico_zona(datos_procesados, \"Norte\")\ngrafico_sur &lt;- grafico_zona(datos_procesados, \"Sur\")\ngrafico_centro &lt;- grafico_zona(datos_procesados, \"Centro\")\ngrafico_oriente &lt;- grafico_zona(datos_procesados, \"Oriente\")\n\n\n\n\nCode\n# Combinar los gráficos en un solo lienzo usando patchwork\ngrafico_zonas &lt;- grafico_norte + grafico_sur + grafico_centro + grafico_oriente + \n  plot_layout(ncol = 2) \n\nggsave(file.path(\"outputs\",\"grafico_preferencias.png\"), plot = grafico_zonas, width = 10, height = 8, dpi = 300)\n\n\n\n\nCode\nconteo_variables &lt;- datos_procesados |&gt;\n  pivot_longer(cols = c(p40314, p40310, p4031), \n               names_to = \"variable\", \n               values_to = \"valor\") |&gt;\n  filter(valor == 1) |&gt;\n  group_by(variable) |&gt;\n  summarise(conteo = n(), \n            porcentaje = (n() / nrow(datos_procesados)) * 100, \n            .groups = 'drop')\n\n# Reemplazar los nombres de las variables por etiquetas descriptivas\nconteo_variables &lt;- conteo_variables |&gt;\n  mutate(variable = case_when(\n    variable == \"p40314\" ~ \"No busco atención\",\n    variable == \"p40310\" ~ \"Botica o farmacia\",\n    variable == \"p4031\" ~ \"Puesto de salud Minsa\",\n    TRUE ~ variable\n  ))\n\nsaveRDS(conteo_variables, file.path(\"outputs\",\"conteo_variables.rds\"))\n\n\n\n\nCode\nbarras &lt;- ggplot(conteo_variables, aes(x = reorder(variable, conteo), y = conteo, fill = porcentaje)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_gradient(low = \"#C7B1CF\", high = \"#A857D1\") +\n  geom_text(aes(label = paste0(round(porcentaje, 1), \"%\")), \n            vjust = -0.5, color = \"white\", size = 7) +\n  labs(title = \"\",\n       x = \"\",\n       y = \"Conteo\",\n       fill = \"Porcentaje\") +\n  theme_minimal() +\n  theme(\n    axis.text = element_text(color = \"white\"),       # Textos de los ejes\n    axis.title = element_text(color = \"white\"),      # Títulos de los ejes\n    axis.text.x = element_text(size = 16),           # eje x textos mas grandes\n    plot.title = element_text(color = \"white\", hjust = 0.5, size = 16, face = \"bold\"),  # Título del gráfico\n    legend.title = element_text(color = \"white\"),    # Título de la leyenda\n    legend.text = element_text(color = \"white\"),     # Texto de la leyenda\n    plot.background = element_rect(fill = \"#222\", color = \"#222\"),  # Fondo oscuro\n    panel.background = element_rect(fill = \"#222\", color = \"#222\"),  # Fondo del panel de barras\n    panel.grid.major = element_blank(),  # Elimina las líneas principales de la cuadrícula\n    panel.grid.minor = element_line(color = \"gray\", linewidth = 0.25)  # Solo deja unas pocas líneas\n  )\n\nggsave(file.path(\"outputs\",\"barras.png\"), plot = barras, width = 10, height = 8, dpi = 300)"
  },
  {
    "objectID": "scripts/02-preprocess-data.html",
    "href": "scripts/02-preprocess-data.html",
    "title": "02-preprocess-data",
    "section": "",
    "text": "Cargar librerías necesarias\n\n\nCode\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(haven)\n\n\nEl modulo 400 no tiene una columna de clasificaciones geográficas, asi que la crearemos.\nDefinimos una función para clasificar por zonas según ubigeo.\n\n\nCode\nclasifica_zonas &lt;- function(ubigeo) {\n    if (nchar(ubigeo) == 5) {\n        ubigeo &lt;- paste0(\"0\", ubigeo)\n    }\n\n    # Primeros dos digitos de ubigeo\n    inicio &lt;- substr(ubigeo, 1, 2)\n\n    # Codigo de ubigeos departamentales de las zonas correspondientes\n    cod_norte &lt;- c(\"24\", \"20\", \"14\", \"06\", \"13\", \"01\")\n    cod_sur &lt;- c(\"05\", \"08\", \"03\", \"04\", \"21\", \"18\", \"23\")\n    cod_oriente &lt;- c(\"16\", \"22\", \"25\", \"17\")\n    cod_centro &lt;- c(\"02\", \"10\", \"19\", \"12\", \"09\", \"11\", \"07\", \"15\")\n\n    # Clasificacion\n\n    if (inicio %in% cod_norte) {\n        return(\"Norte\")\n    } else if (inicio %in% cod_sur) {\n        return(\"Sur\")\n    } else if (inicio %in% cod_oriente) {\n        return(\"Oriente\")\n    } else if (inicio %in% cod_centro) {\n        return(\"Centro\")\n    } else {\n        return(\"Desconocido\") # En caso haya anomalias\n    }\n}\n\n\nCreamos la columna zona aplicando la función a la columna ubigeo de nuestros datos previamente importados.\n\n\nCode\ndatos &lt;- readRDS(\"outputs/datos.rds\")\ndatos$zona &lt;- sapply(datos$ubigeo, clasifica_zonas)\n\n\nAhora busquemos algunos valores missings.\n\n\nCode\n#|label : missing_df\n\n# calculando los missings totales por columna\nmissing_por_columna &lt;- colSums(is.na(datos))\n\n# creando un dataframe para organizar los datos\nmissing_df &lt;- data.frame(\n    variable = names(missing_por_columna),\n    missing_values = missing_por_columna\n)\n\n# guardamos los datos\nsaveRDS(missing_df, file.path(\"outputs\", \"missing_df.rds\"))\n\n\nLa columna p4025, que nos indica si alguien sintio o no un malestar, contiene 105 missings. Echemos un vistazo a aquellas filas.\n\n\nCode\nporcentajes_na &lt;- datos |&gt;\n    group_by(zona) |&gt;\n    summarise(\n        total_na = sum(is.na(p4025)),\n        percent_na = (total_na / 105) * 100,\n        percent_total = (total_na / dim(datos)[1]) * 100\n    )\n\n\nsaveRDS(porcentajes_na, file.path(\"outputs\", \"porcentajes.rds\"))\n\n\nLos datos faltantes representan únicamente el 0.04% del total de los datos, asi que podriamos prescindir de esa información.\nAl ser solo 105 datos podemos inspeccionar visualmente la tabla, y notaremos que prácticamente todas las columnas están vacías, por lo que procederemos a eliminar esas filas.\n\n\nCode\n# Procediendo la eliminacion\ndatos &lt;- datos |&gt;\n    filter(!is.na(p4025))\n\n# Revisando si hay missings\nsummary(datos)\n\n\n    ubigeo              p4025           p4031           p4032      \n Length:112425      Min.   :0.000   Min.   :0.00    Min.   :0.00   \n Class :character   1st Qu.:0.000   1st Qu.:0.00    1st Qu.:0.00   \n Mode  :character   Median :0.000   Median :0.00    Median :0.00   \n                    Mean   :0.439   Mean   :0.11    Mean   :0.05   \n                    3rd Qu.:1.000   3rd Qu.:0.00    3rd Qu.:0.00   \n                    Max.   :1.000   Max.   :1.00    Max.   :1.00   \n                                    NA's   :49349   NA's   :49349  \n     p4033           p4034           p4035           p4036      \n Min.   :0.00    Min.   :0.00    Min.   :0.00    Min.   :0.00   \n 1st Qu.:0.00    1st Qu.:0.00    1st Qu.:0.00    1st Qu.:0.00   \n Median :0.00    Median :0.00    Median :0.00    Median :0.00   \n Mean   :0.01    Mean   :0.02    Mean   :0.03    Mean   :0.04   \n 3rd Qu.:0.00    3rd Qu.:0.00    3rd Qu.:0.00    3rd Qu.:0.00   \n Max.   :1.00    Max.   :1.00    Max.   :1.00    Max.   :1.00   \n NA's   :49349   NA's   :49349   NA's   :49349   NA's   :49349  \n     p4037           p4038           p4039           p40310     \n Min.   :0       Min.   :0.00    Min.   :0.00    Min.   :0.00   \n 1st Qu.:0       1st Qu.:0.00    1st Qu.:0.00    1st Qu.:0.00   \n Median :0       Median :0.00    Median :0.00    Median :0.00   \n Mean   :0       Mean   :0.03    Mean   :0.03    Mean   :0.22   \n 3rd Qu.:0       3rd Qu.:0.00    3rd Qu.:0.00    3rd Qu.:0.00   \n Max.   :1       Max.   :1.00    Max.   :1.00    Max.   :1.00   \n NA's   :49349   NA's   :49349   NA's   :49349   NA's   :49349  \n     p40311          p40313          p40314          zona          \n Min.   :0       Min.   :0.00    Min.   :0.00    Length:112425     \n 1st Qu.:0       1st Qu.:0.00    1st Qu.:0.00    Class :character  \n Median :0       Median :0.00    Median :0.00    Mode  :character  \n Mean   :0       Mean   :0.01    Mean   :0.47                      \n 3rd Qu.:0       3rd Qu.:0.00    3rd Qu.:1.00                      \n Max.   :1       Max.   :1.00    Max.   :1.00                      \n NA's   :49349   NA's   :49349   NA's   :49349                     \n\n\nTenemos un caso curioso: todas las columnas “p403” tienen 49349 missings exactamente. Su explicación se puede ver en el siguiente resultado.\n\n\nCode\nconteo_p4025 &lt;- datos |&gt;\n    group_by(p4025) |&gt;\n    summarise(conteo = n())\n\nconteo_p4025\n\n\n\n  \n\n\n\nEl valor 1 , para la columna p4025, significa que la persona no sintio malestar.\nLas columnas p403 registran a donde se fue a atender una persona que sintio un malestar, es evidente que estan vacias para cada caso 1. Pudieron completarse con un 0, sin embargo el modulo 400 es tan amplio, que para aligerar su peso, parece ser que se omitieron ciertos valores que eran obvios. Para responder esta primera pregunta no necesitamos completar esos valores omitidos. Solo nos interesa saber donde se atendieron las personas.\n\n\nCode\n# Creando un nuevo conjunto de datos\n\ndatos_procesados &lt;- datos |&gt;\n    filter(p4025 == 0) |&gt;\n    mutate(across(starts_with(\"p403\"), as.numeric))\n# guardamos los datos\nsaveRDS(datos_procesados, file.path(\"outputs\", \"datos_procesados.rds\"))"
  },
  {
    "objectID": "scripts/01-import-data.html",
    "href": "scripts/01-import-data.html",
    "title": "01-import-data",
    "section": "",
    "text": "Code\nlibrary(haven)\nlibrary(data.table)\nlibrary(sf)\n\n\nLinking to GEOS 3.12.2, GDAL 3.9.3, PROJ 9.4.1; sf_use_s2() is TRUE\n\n\nAntes de trabajar con cualquier módulo de ENAHO, se recomienda leer con calma su ficha técnica y el diccionario de variables (el cual es descargado junto con los datos en el enlace provisto en la sección principal).\nLuego de haber hecho ese trabajo, importaremos solo las columnas que nos interesa para responder nuestra pregunta clave: ¿a dónde va un peruano cuando se siente mal?\n\nEnaho 2023 - 400\n\n\nCode\n1set.seed(123)\n2modulo400 &lt;- read_dta(\"data/enaho01a-2023-400.dta\")\n3columnas &lt;- c(7, 48, 50:62)\n4datos &lt;- as.data.table(modulo400)[, ..columnas]\n5setnames(datos, tolower(names(datos)))\n6saveRDS(datos, file.path(\"outputs\",\"datos.rds\"))\n\n\n\n1\n\nFijar semilla para reproducibilidad\n\n2\n\nCargando el módulo completo desde el archivo .dta\n\n3\n\nSelección de columnas de interés\n\n4\n\nConvertir el dataset a un formato de data.table\n\n5\n\nConvertir los nombres de las columnas a minúsculas\n\n6\n\nGuardar la tabla en formato .rds\n\n\n\n\nCon miras de realizar un mapa para graficar mejor la idea que queremos realizar importaremos también un un shapefile de Limites departamentales obtenido de la página de [datos abiertos del Perù](https://www.datosabiertos.gob.pe/dataset/limites-departamentales “Ir al enlace”).\n\n\nCode\n1peru_shapefile &lt;- st_read(\"data/DEPARTAMENTOS.shp\")\n2saveRDS(peru_shapefile, file.path(\"outputs\", \"departamentos.rds\"))\n\n\n\n1\n\nCargamos el shapefile donde esta contenida la informacion geoespacial que necesitamos del Perú.\n\n2\n\nGuardamos el archivo para su posterior uso.\n\n\n\n\nReading layer `DEPARTAMENTOS' from data source \n  `D:\\Archivos Generales Axel\\proyectos\\peru_salud\\data\\DEPARTAMENTOS.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 25 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -81.32823 ymin: -18.35093 xmax: -68.65228 ymax: -0.03860597\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "scripts/03-mapa.html",
    "href": "scripts/03-mapa.html",
    "title": "03-mapa",
    "section": "",
    "text": "Cargar librerías necesarias\nCrearemos un mapa para visualizar la distribución de individuos enfermos según zona.\nEmpecemos creando una función que asigna a cada departamento su zona correspondiente.\n\n\nCode\n# Crear una función para asignar zona según el departamento\n\nasignar_zona &lt;- function(departamento) {\n    # Definir las zonas por departamento\n    zona_norte &lt;- c(\"TUMBES\", \"PIURA\", \"LAMBAYEQUE\", \"CAJAMARCA\", \"LA LIBERTAD\", \"AMAZONAS\")\n    zona_sur &lt;- c(\"AYACUCHO\", \"CUSCO\", \"APURIMAC\", \"AREQUIPA\", \"PUNO\", \"MOQUEGUA\", \"TACNA\")\n    zona_oriente &lt;- c(\"LORETO\", \"SAN MARTIN\", \"UCAYALI\", \"MADRE DE DIOS\")\n    zona_centro &lt;- c(\"ANCASH\", \"HUANUCO\", \"PASCO\", \"JUNIN\", \"HUANCAVELICA\", \"ICA\", \"CALLAO\", \"LIMA\")\n\n    # Asignar la zona según el departamento\n    if (departamento %in% zona_norte) {\n        return(\"Norte\")\n    } else if (departamento %in% zona_sur) {\n        return(\"Sur\")\n    } else if (departamento %in% zona_oriente) {\n        return(\"Oriente\")\n    } else if (departamento %in% zona_centro) {\n        return(\"Centro\")\n    } else {\n        return(NA) # Si no encuentra el departamento, retorna NA\n    }\n}\n\n# Aplicar la función al shapefile para añadir la columna 'zona'\nperu_shapefile &lt;- readRDS(\"outputs/departamentos.rds\")\nperu_shapefile$zona &lt;- sapply(peru_shapefile$DEPARTAMEN, asignar_zona)\n\n# Ver el resultado\nhead(peru_shapefile)\n\n\n\n  \n\n\n\nAhora hagamos el conteo de individuos con malestar por zona.\n\n\nCode\ndatos_procesados &lt;- readRDS(\"outputs/datos_procesados.rds\")\n\nconteo &lt;- datos_procesados |&gt;\n    group_by(zona) |&gt;\n    summarise(\n        conteo = n(),\n        porcentaje = (n() / nrow(datos_procesados)) * 100,\n        .groups = \"drop\"\n    )\n\nsaveRDS(conteo, file.path(\"outputs\", \"conteo.rds\"))\n\n\nCrucemos la información de conteo con los datos espaciales de Perú.\n\n\nCode\nperu_shapefile &lt;- peru_shapefile |&gt;\n    left_join(conteo |&gt; select(zona, conteo), by = c(\"zona\" = \"zona\"))\n\nperu_shapefile\n\n\n\n  \n\n\n\n\n\nCode\n# Crear el mapa con ggplot2\nmapa &lt;- ggplot(data = peru_shapefile) +\n    geom_sf(aes(fill = conteo),\n        color = \"black\",\n        size = 0.5\n    ) + # Colorear según conteo\n\n    scale_fill_gradient(\n        low = \"white\",\n        high = \"purple\",\n        limits = c(7000, max(peru_shapefile$conteo))\n    ) +\n    labs(\n        title = \"Distribución de personas con malestar según zonas\",\n        fill = \"Conteo\"\n    ) +\n    theme_minimal() + # Estilo minimalista\n\n    theme(\n        axis.text = element_blank(), # Ocultar los textos del eje\n        axis.ticks = element_blank(),\n        plot.title = element_text(\n            color = \"white\",\n            hjust = 0.5,\n            size = 16,\n            face = \"bold\"\n        ), # Título en blanco\n        legend.title = element_text(color = \"white\"), # Título de leyenda en blanco\n        legend.text = element_text(color = \"white\")\n    ) # Texto de leyenda en blanco)  # Ocultar las marcas del eje\n\nggsave(file.path(\"outputs\", \"mapa.png\"), plot = mapa, width = 10, height = 8, dpi = 300)"
  }
]